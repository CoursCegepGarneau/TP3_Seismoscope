// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Seismoscope.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250516020923_UpdateSensors")]
    partial class UpdateSensors
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("Seismoscope.Model.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("DefaultFrequency")
                        .HasColumnType("REAL");

                    b.Property<bool>("Delivered")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Frequency")
                        .HasColumnType("REAL");

                    b.Property<double>("MaxFrequency")
                        .HasColumnType("REAL");

                    b.Property<double>("MaxThreshold")
                        .HasColumnType("REAL");

                    b.Property<double>("MinThreshold")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Operational")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SensorStatus")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Treshold")
                        .HasColumnType("REAL");

                    b.Property<int>("Usage")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("assignedStationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("assignedStationId");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("Seismoscope.Model.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Région")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nom")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prenom")
                        .HasColumnType("TEXT");

                    b.Property<int?>("StationId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StationId1");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Seismoscope.Model.Admin", b =>
                {
                    b.HasBaseType("User");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("Seismoscope.Model.Employe", b =>
                {
                    b.HasBaseType("User");

                    b.Property<int>("StationId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("StationId");

                    b.HasDiscriminator().HasValue("Employe");
                });

            modelBuilder.Entity("Seismoscope.Model.Sensor", b =>
                {
                    b.HasOne("Seismoscope.Model.Station", "assignedStation")
                        .WithMany()
                        .HasForeignKey("assignedStationId");

                    b.Navigation("assignedStation");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.HasOne("Seismoscope.Model.Station", null)
                        .WithMany("Employes")
                        .HasForeignKey("StationId1");
                });

            modelBuilder.Entity("Seismoscope.Model.Employe", b =>
                {
                    b.HasOne("Seismoscope.Model.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Seismoscope.Model.Station", b =>
                {
                    b.Navigation("Employes");
                });
#pragma warning restore 612, 618
        }
    }
}
